# upstream PLACEHOLDER_BACKEND_NAME {
#   # The web app.
#   server PLACEHOLDER_BACKEND_NAME:PLACEHOLDER_BACKEND_PORT;
# }

# Redirect 'www' addresses to the non-www version, and also take care of
# redirects to HTTPS at the same time.
# i.e www.localhost:80 will be routed to this block

# server {
#   listen 80;
#   server_name _;
#   return 301 https://PLACEHOLDER_VHOST$request_uri;
# }

server {
  # "deferred" reduces the number of formalities between the server and client.
  listen 80 default_server deferred;
  # server_name PLACEHOLDER_VHOST;

  # Static asset path, which is read from the PLACEHOLDER_BACKEND_NAME
  # container's VOLUME.
  root /usr/share/nginx/html;
  index index.html index.htm;

  location / {
      # First attempt to serve request as file, then
      # as directory, then fall back to redirecting to index.html
      add_header X-SERVE "served by location /";
      try_files $uri $uri/ /index.html;
  }

  # Serve static assets.
  #
  # Ensure timeouts are equal across browsers.
  keepalive_timeout 60;

  # Disallow access to hidden files and directories.
  location ~ /\. {
    return 404;
    access_log off;
    log_not_found off;
  }

  # Attempt to load the favicon or fall back to status code 204.
  location = /favicon.ico {
    try_files /favicon.ico = 204;
    access_log off;
    log_not_found off;
  }

  # Force SSL connections on agents (browsers) who support this header.
  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains;";

  # Load the web app back end with proper headers.

  # @ specifies a named_location which will never be used to match incoming request
  # Its purpose is used as a reference to determine the action
  # In this case, it is used for @PLACEHOLDER_BACKEND_NAME specified above in try_files
  # Once @PLACEHOLDER_BACKEND_NAME is reached as the last fallback option, named_location will be used to handle response
  # location @PLACEHOLDER_BACKEND_NAME {
  #   proxy_set_header X-Forwarded-Proto $scheme;
  #   proxy_set_header Host $http_host;
  #   proxy_set_header X-Real-IP $remote_addr;
  #   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  #   proxy_set_header X-NGINX "nginx";
  #   proxy_redirect off;

  #   # if ($http_x_forwarded_proto = "http") {
  #   #   return 301 https://$host$request_uri;
  #   # }

  #   proxy_pass http://PLACEHOLDER_BACKEND_NAME;
  # }

  # location @PLACEHOLDER_BACKEND_NAME {
  #   proxy_set_header X-Forwarded-Proto $scheme;
  #   proxy_set_header Host $http_host;
  #   proxy_set_header X-Real-IP $remote_addr;
  #   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  #   proxy_set_header X-NGINX "nginx";
  #   proxy_redirect off;

  #   # if ($http_x_forwarded_proto = "http") {
  #   #   return 301 https://$host$request_uri;
  #   # }

  #   # proxy_pass http://PLACEHOLDER_BACKEND_NAME:PLACEHOLDER_BACKEND_PORT;
  #   proxy_pass http://PLACEHOLDER_BACKEND_NAME;
  # }

  location /express/ {
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-NGINX "nginx";
    proxy_redirect off;

    # if ($http_x_forwarded_proto = "http") {
    #   return 301 https://$host$request_uri;
    # }

    proxy_pass http://PLACEHOLDER_BACKEND_NAME:PLACEHOLDER_BACKEND_PORT/;
  }

}
